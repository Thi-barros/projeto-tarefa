package com.unip.desafio.controller;

import java.text.ParseException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.unip.desafio.model.Projeto;
import com.unip.desafio.model.ProjetoService;
import com.unip.desafio.model.Tarefa;
import com.unip.desafio.model.TarefaService;

import jakarta.transaction.Transactional;



@RestController
@RequestMapping("/projetos")
public class ProjetoController {
//<select name="projeto_id" id="projeto_id" required th:each="projeto : ${projetos}" th:value="${projeto.id}" th:text="${projeto.nome}"></select>

	@Autowired
	private ProjetoService projetoService; 
	@Autowired
	private TarefaService tarefaService;
	
	@GetMapping("/form")
	public ModelAndView mostrarFormulario() {
		return new ModelAndView("index");
	}
	
	@PostMapping("/salvar")
	@Transactional
	String salvarProjeto(@ModelAttribute("projeto") Projeto projeto1) throws ParseException {
		Projeto projeto = new Projeto();
		projetoService.salvarProjeto(projeto);
		return "redirect:/listarProjetos"; 
	}
	
	@PutMapping("/{id}")
	public Projeto atualizarProjeto(@PathVariable Long id, @RequestBody Projeto projetoAtualizado){
		Projeto projetoExistente = (Projeto) projetoService.buscarProjeto(id);
		if(projetoExistente != null) {
			projetoExistente.setNome(projetoAtualizado.getNome());
			projetoExistente.setDescricao(projetoAtualizado.getDescricao());
			projetoExistente.setStatus(projetoAtualizado.isStatus());
			projetoExistente.setId(projetoAtualizado.getId());
			return projetoService.salvarProjeto(projetoExistente);
		}
		return null;
	}
	 
	@GetMapping("/listar")
	public ModelAndView listarProjetos(){
		ModelAndView mav = new ModelAndView("index");
		mav.addObject("projetos", projetoService.listarProjetos());
		mav.addObject("projeto", new Projeto());
		mav.addObject("tarefa", new Tarefa());
		mav.addObject("listaTarefas", tarefaService.listarTarefas());
		return mav;
	}
	
	@GetMapping("/{id}")
	public Projeto buscarProjeto(@PathVariable Long id){
		return projetoService.buscarProjeto(id);
	}
	
	@DeleteMapping("/{id}")
	public void deletarProjeto(@PathVariable Long id){
		projetoService.deletarProjeto(id);
	}
}
